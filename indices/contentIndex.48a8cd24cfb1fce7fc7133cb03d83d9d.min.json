{"/":{"title":"软件百宝箱","content":"\nHello world\n\n软件百宝箱","lastmodified":"2022-09-18T09:28:34.322744221Z","tags":null},"/README":{"title":"","content":"# baibaoxiang.app\n","lastmodified":"2022-09-18T09:28:34.322744221Z","tags":null},"/app/Everything-%E9%80%9F%E5%BA%A6%E9%A3%9E%E5%BF%AB%E7%9A%84%E6%96%87%E4%BB%B6%E5%90%8D%E6%90%9C%E7%B4%A2%E5%B7%A5%E5%85%B7":{"title":"Everything - 速度飞快的文件名搜索工具","content":"\n## 简介\nEverything 是一款基于名称快速定位文件和文件夹的软件。搜索速度飞快，基本秒搜。\n\nEverything 只能根据文件名来搜索，不能搜索文件内容，如想搜索文件内容，可使用 Anytxt 等全文搜索工具。\n\n推荐理由：软件小巧，搜索速度飞快。\n\n### 基本信息\n- 软件名：Everything\n- 官网地址： https://www.voidtools.com/zh-cn/\n- 开发者：David Carpenter\n- 下载地址： https://www.voidtools.com/zh-cn/downloads/\n\n## 下载安装\n下载完按照提示安装即可，推荐使用「安装版」，「便携版」可以放 U盘使用。\n不清楚的可以参见官方指导，非常详细：[安装 Everything](https://www.voidtools.com/zh-cn/support/everything/installing_everything/)\n\n## 功能介绍\n### 创建索引\nEverything 首次使用会新建索引，创建索引的速度非常快。Everything 仅索引文件和文件夹名，一般仅需几秒便可建立其数据库。全新安装的 Windows 10 (大约 120,000 个文件) 仅需 1 秒即可索引完成。索引 1,000,000 个文件将需要大约 1 分钟。[^1]\n\n### 搜索\n#### 关键词直接搜索\n直接在搜索框输入关键字进行搜索。默认全盘搜索，可以凭借记忆输入文件名关键字 + 文件类型后缀来搜索。例如：```设计文档 .ppt``` ，输入搜索字符会实时搜索结果，根据结果列表可以按照文件路径、大小、文件类型进行排序。\n\n![everything-关键词搜索.png](../res/everything/everything-关键词搜索.png)\n\n这个是最常用的方法，基本可以满足大多数场景。\n\n#### 搜索特定目录\n可以按照目录来搜索，简单方法是将 Everything 集成到系统右键菜单上(默认安装未勾选)，右键文件夹直接搜索，如下图所示。\n\n**工具 --\u003e 选项 --\u003e 常规：**\n![everything-添加右键菜单.png](../res/everything/everything-添加右键菜单.png)\n\n右键使用 Everything 搜索：\n![everything-右键菜单.png](../res/everything/everything-右键菜单.png)\n\n或直接手动输入\n例如，搜索文件夹 D:\\\\Downloads 中文件和文件夹：```D:\\downloads\\ ```\n\n使用双引号以转义空格，搜索 C:\\\\Program Files 下文件和文件夹：```\"C:\\Program Files\\\" ```\n\n![everything-目录搜索.png](../res/everything/everything-目录搜索.png)\n\n#### 搜索特定文件类型\n输入关键字 + 文件后缀即可，如 `设计规格 *.xlsx`\n\n#### 使用筛选器搜索\n筛选器是预定义的搜索。Everything 内置了常用的几种搜索类型，如文档、图片、视频等。输入关键字后，直接选用筛选器进行筛选。\n\n1、输入关键字\n![everything-筛选器输入关键字.png](../res/everything/everything-筛选器输入关键字.png)\n\n2、菜单栏 --\u003e 搜索 --\u003e 选择「图片」\n![everything-筛选器使用.png](../res/everything/everything-筛选器使用.png)\n\n3、显示筛选结果\n![everything-筛选器使用后.png](../res/everything/everything-筛选器使用后.png)\n\n#### 自定义筛选器\n除了内置的筛选器，我们还可以自定义。我们先查看下内置筛选器参数设置。\n\n菜单 --\u003e 搜索 --\u003e 管理筛选器；选中「图片」，点击「编辑」；可以看到「搜索」项中，填入 `ext` 命令 + 图片文件后缀。 \n![](../res/everything/everything-筛选器参数定义.png)\n\n我们参照上图添加一个 markdown 文件筛选器：\n![](../res/everything/everything-筛选器markdown.png)\n\n保存后即可使用，更多搜索语法请见 [官方搜索语法说明](https://www.voidtools.com/zh-cn/support/everything/searching/)，或者直接打开「帮助」菜单，点击「搜索语法」。\n\n#### 书签使用\n常用的搜索我们可以保存成书签，一键搜索。\n\n输入关键字，搜索完成，点击菜单 --\u003e 书签 --\u003e 添加到书签，然后保存。使用的时候直接选择对应书签即可。\n\n![everything-书签使用.png](../res/everything/everything-书签使用.png)\n\n### HTTP 服务器\nEverything 支持 http、etp/ftp 服务器，开启后你可以通过网络浏览器搜索和访问共享的文件。公司内部文件服务器资料共享可以使用本功能。\n\n菜单 --\u003e工具 --\u003e 选项 --\u003e HTTP 服务器 --\u003e 启用 HTTP 服务器 --\u003e确定。\n\n浏览器输入本机 IP 可以直接搜索。\n![everything-http服务器.png](../res/everything/everything-http服务器.png)\n### 实现原理\n为什么 Everything 搜索能这么快，当你 Windows 默认搜索还在转圈时，Everything 早已在你输入完关键字时，已完成搜索。\n\n以下是 Everything 作者在官方论坛的回答：[^2]\n\n\u003e Everything scans the MFT directly, which limits Everything to NTFS volumes only.\n\u003e \n\u003e Everything makes a very light copy of this mft and keeps it in memory, using the USN Change journal to monitor changes.\n\u003e \n\u003e Searches are compiled into byte code and executed.\n\n大致意思就是 Everything 不是直接去扫描电脑上的文件，而是直接读取 NTFS 卷的 MTF(Master File Table)[^3] 数据表，这个表里存了当前磁盘所有文件信息，然后监听 USN 变更日志。USN 日志里记录了所有文件的变更记录[^4]，每当 USN 有变化，就重新更新文件数据。\n\n受限于此实现机制，Everything 只支持 NTFS 格式测磁盘，不支持 FAT32 等其他格式。\n\n## 扩展阅读\n- [官方 支持文档 - voidtools](https://www.voidtools.com/zh-cn/support/everything/)\n\t- 注：里面详细讲解了Everything 使用的方方面面\n- [官方 搜索指导 - voidtools](https://www.voidtools.com/zh-cn/support/everything/searching/)\n\t- 注：介绍了所有搜索方法，正则搜索等\n- [官方 HTTP服务器 - voidtools](https://www.voidtools.com/zh-cn/support/everything/http/)\n\n## 参考\n[^1]: [\"Everything\" 索引全部文件需要多长时间？ - voidtools](https://www.voidtools.com/zh-cn/faq/#everything_%E7%B4%A2%E5%BC%95%E5%85%A8%E9%83%A8%E6%96%87%E4%BB%B6%E9%9C%80%E8%A6%81%E5%A4%9A%E9%95%BF%E6%97%B6%E9%97%B4%EF%BC%9F)\n[^2]: [Technical questions about Everything - voidtools forum](https://www.voidtools.com/forum/viewtopic.php?f=2\u0026t=2030)\n[^3]: [Master File Table (Local File Systems) - Win32 apps | Microsoft Learn](https://learn.microsoft.com/en-us/windows/win32/fileio/master-file-table)\n[^4]:[USN Journal - Wikipedia](https://en.wikipedia.org/wiki/USN_Journal)\n\n","lastmodified":"2022-09-18T09:28:34.322744221Z","tags":null},"/notes/test":{"title":"Configuration","content":"\n## Configuration\nQuartz is designed to be extremely configurable. You can find the bulk of the configuration scattered throughout the repository depending on how in-depth you'd like to get.\n\nThe majority of configuration can be found under `data/config.yaml`. An annotated example configuration is shown below.\n\n```yaml {title=\"data/config.yaml\"}\n# The name to display in the footer\nname: Jacky Zhao\n\n# whether to globally show the table of contents on each page\n# this can be turned off on a per-page basis by adding this to the\n# front-matter of that note\nenableToc: true\n\n# whether to by-default open or close the table of contents on each page\nopenToc: false\n\n# whether to display on-hover link preview cards\nenableLinkPreview: true\n\n# whether to render titles for code blocks\nenableCodeBlockTitle: true \n\n# whether to render copy buttons for code blocks\nenableCodeBlockCopy: true \n\n# whether to render callouts\nenableCallouts: true\n\n# whether to try to process Latex\nenableLatex: true\n\n# whether to enable single-page-app style rendering\n# this prevents flashes of unstyled content and improves\n# smoothness of Quartz. More info in issue #109 on GitHub\nenableSPA: true\n\n# whether to render a footer\nenableFooter: true\n\n# whether backlinks of pages should show the context in which\n# they were mentioned\nenableContextualBacklinks: true\n\n# whether to show a section of recent notes on the home page\nenableRecentNotes: false\n\n# whether to display an 'edit' button next to the last edited field\n# that links to github\nenableGitHubEdit: true\nGitHubLink: https://github.com/jackyzha0/quartz/tree/hugo/content\n\n# whether to use Operand to power semantic search\n# IMPORTANT: replace this API key with your own if you plan on using\n# Operand search!\nenableSemanticSearch: false\noperandApiKey: \"REPLACE-WITH-YOUR-OPERAND-API-KEY\"\n\n# page description used for SEO\ndescription:\n  Host your second brain and digital garden for free. Quartz features extremely fast full-text search,\n  Wikilink support, backlinks, local graph, tags, and link previews.\n\n# title of the home page (also for SEO)\npage_title:\n  \"🪴 Quartz 3.3\"\n\n# links to show in the footer\nlinks:\n  - link_name: Twitter\n    link: https://twitter.com/_jzhao\n  - link_name: Github\n    link: https://github.com/jackyzha0\n```\n\n### Code Block Titles\nTo add code block titles with Quartz:\n\n1. Ensure that code block titles are enabled in Quartz's configuration:\n\n    ```yaml {title=\"data/config.yaml\", linenos=false}\n    enableCodeBlockTitle: true\n    ```\n\n2. Add the `title` attribute to the desired [code block\n   fence](https://gohugo.io/content-management/syntax-highlighting/#highlighting-in-code-fences):\n\n      ```markdown {linenos=false}\n       ```yaml {title=\"data/config.yaml\"}\n       enableCodeBlockTitle: true  # example from step 1\n       ```\n      ```\n\n**Note** that if `{title=\u003cmy-title\u003e}` is included, and code block titles are not\nenabled, no errors will occur, and the title attribute will be ignored.\n\n### HTML Favicons\nIf you would like to customize the favicons of your Quartz-based website, you \ncan add them to the `data/config.yaml` file. The **default** without any set \n`favicon` key is:\n\n```html {title=\"layouts/partials/head.html\", linenostart=15}\n\u003clink rel=\"shortcut icon\" href=\"icon.png\" type=\"image/png\"\u003e\n```\n\nThe default can be overridden by defining a value to the `favicon` key in your \n`data/config.yaml` file. For example, here is a `List[Dictionary]` example format, which is\nequivalent to the default:\n\n```yaml {title=\"data/config.yaml\", linenos=false}\nfavicon:\n  - { rel: \"shortcut icon\", href: \"icon.png\", type: \"image/png\" }\n#  - { ... } # Repeat for each additional favicon you want to add\n```\n\nIn this format, the keys are identical to their HTML representations.\n\nIf you plan to add multiple favicons generated by a website (see list below), it\nmay be easier to define it as HTML. Here is an example which appends the \n**Apple touch icon** to Quartz's default favicon:\n\n```yaml {title=\"data/config.yaml\", linenos=false}\nfavicon: |\n  \u003clink rel=\"shortcut icon\" href=\"icon.png\" type=\"image/png\"\u003e\n  \u003clink rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/apple-touch-icon.png\"\u003e\n```\n\nThis second favicon will now be used as a web page icon when someone adds your \nwebpage to the home screen of their Apple device. If you are interested in more \ninformation about the current and past standards of favicons, you can read \n[this article](https://www.emergeinteractive.com/insights/detail/the-essentials-of-favicons/).\n\n**Note** that all generated favicon paths, defined by the `href` \nattribute, are relative to the `static/` directory.\n\n### Graph View\nTo customize the Interactive Graph view, you can poke around `data/graphConfig.yaml`.\n\n```yaml {title=\"data/graphConfig.yaml\"}\n# if true, a Global Graph will be shown on home page with full width, no backlink.\n# A different set of Local Graphs will be shown on sub pages.\n# if false, Local Graph will be default on every page as usual\nenableGlobalGraph: false\n\n### Local Graph ###\nlocalGraph:\n    # whether automatically generate a legend\n    enableLegend: false\n    \n    # whether to allow dragging nodes in the graph\n    enableDrag: true\n    \n    # whether to allow zooming and panning the graph\n    enableZoom: true\n    \n    # how many neighbours of the current node to show (-1 is all nodes)\n    depth: 1\n    \n    # initial zoom factor of the graph\n    scale: 1.2\n    \n    # how strongly nodes should repel each other\n    repelForce: 2\n\n    # how strongly should nodes be attracted to the center of gravity\n    centerForce: 1\n\n    # what the default link length should be\n    linkDistance: 1\n    \n    # how big the node labels should be\n    fontSize: 0.6\n    \n    # scale at which to start fading the labes on nodes\n    opacityScale: 3\n\n### Global Graph ###\nglobalGraph:\n\t# same settings as above\n\n### For all graphs ###\n# colour specific nodes path off of their path\npaths:\n  - /moc: \"#4388cc\"\n```\n\n\n## Styling\nWant to go even more in-depth? You can add custom CSS styling and change existing colours through editing `assets/styles/custom.scss`. If you'd like to target specific parts of the site, you can add ids and classes to the HTML partials in `/layouts/partials`. \n\n### Partials\nPartials are what dictate what gets rendered to the page. Want to change how pages are styled and structured? You can edit the appropriate layout in `/layouts`.\n\nFor example, the structure of the home page can be edited through `/layouts/index.html`. To customize the footer, you can edit `/layouts/partials/footer.html`\n\nMore info about partials on [Hugo's website.](https://gohugo.io/templates/partials/)\n\nStill having problems? Checkout our [FAQ and Troubleshooting guide](notes/troubleshooting.md).\n\n## Language Support\n[CJK + Latex Support (测试)](notes/CJK%20+%20Latex%20Support%20(测试).md) comes out of the box with Quartz.\n\nWant to support languages that read from right-to-left (like Arabic)? Hugo (and by proxy, Quartz) supports this natively.\n\nFollow the steps [Hugo provides here](https://gohugo.io/content-management/multilingual/#configure-languages) and modify your `config.toml`\n\nFor example:\n\n```toml\ndefaultContentLanguage = 'ar'\n[languages]\n  [languages.ar]\n    languagedirection = 'rtl'\n    title = 'مدونتي'\n    weight = 1\n```\n","lastmodified":"2022-09-18T09:28:34.322744221Z","tags":null},"/topic/git/Giscus-%E7%BB%99-Github-Pages-%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F":{"title":"Giscus - 给 Github Pages 添加评论系统","content":"\n## 简介\nGiscus 是一个由 GitHub Discussions 驱动的评论系统。用户登录 Github 账号授权后，就可以在你网站上评论了。配置简单，使用方便。\n\n类似的评论系统还有 [gitalk](https://github.com/gitalk/gitalk) 和 [utterances]([utterances](https://utteranc.es/)) ，不过这俩是基于github issue 功能的评论系统，通过新建 issue 来进行回复，没有基于 github discussion 的 Giscus 好用。\n\n### 基本信息\n- 软件名：Giscus\n- 官网地址： https://github.com/giscus/giscus\n- 开发者：laymonage\n- 安装地址： https://giscus.app/zh-CN\n\n## 安装配置\n按照 https://giscus.app/zh-CN 配置指导来就行。\n\n- 安装 [Giscus App](https://github.com/apps/giscus)，并授权访问你的仓库。\n- 前往 [Giscus 页面](https://giscus.app/zh-CN) 进行配置。\n- 最后把生成的脚本加到你的页面中即可。\n\n**遇到问题：**\n`页面 ↔️ discussion 映射关系` 这项当前对于中文页面会显示乱码，因为对路径进行 url 编码了，可以改成 `页面 title`。\n\n\n","lastmodified":"2022-09-18T09:28:34.326744254Z","tags":null},"/topic/git/git-status-%E4%B8%AD%E6%96%87%E6%96%87%E4%BB%B6%E5%90%8D%E6%98%BE%E7%A4%BA%E4%B9%B1%E7%A0%81":{"title":"git status 中文文件名显示乱码","content":"\n## 问题描述\ngit 仓添加中文文件名后，`git status` 显示乱码，很不友好。\n\n## 解决方法\n设置 git 的 `core.quotepath` 选项为 `false` ：\n```bash\ngit config --global core.quotepath false\n```\n\n## 问题详情\n目录下有名为 `中文.md` 的测试文件，`git status` 查看显示如下：\n```bash\nbaibaoxiang@MacBook-Pro content % git status \nOn branch main\nYour branch is up to date with 'origin/main'.\n\nUntracked files:\n  (use \"git add \u003cfile\u003e...\" to include in what will be committed)\n\t\"\\344\\270\\255\\346\\226\\207.md\"\n```\n\n原因是 git 默认情况下会对字符编码大于 0x80 的进行 quote，如下是 [git 官网 quotePath 选项说明](https://git-scm.com/docs/git-config#Documentation/git-config.txt-corequotePath)\n\n\u003e core.quotePath\n\u003e \n\tCommands that output paths (e.g. _ls-files_, _diff_), will quote \"unusual\" characters in the pathname by enclosing the pathname in double-quotes and escaping those characters with backslashes in the same way C escapes control characters (e.g. `\\t` for TAB, `\\n` for LF, `\\\\` for backslash) or bytes with values larger than 0x80 (e.g. octal `\\302\\265` for \"micro\" in UTF-8). If this variable is set to false, bytes higher than 0x80 are not considered \"unusual\" any more. Double-quotes, backslash and control characters are always escaped regardless of the setting of this variable. A simple space character is not considered \"unusual\". Many commands can output pathnames completely verbatim using the `-z` option. The default value is true.\n\n`core.quotePath` 设置为 `false` 后，效果如下：\n```bash\nbaibaoxiang@MacBook-Pro content % git status \nOn branch main\nYour branch is up to date with 'origin/main'.\n\nUntracked files:\n  (use \"git add \u003cfile\u003e...\" to include in what will be committed)\n\t中文.md\n```\n\n## 扩展阅读：\n- [Git - git-config Documentation](https://git-scm.com/docs/git-config#Documentation/git-config.txt-corequotePath)\n\n","lastmodified":"2022-09-18T09:28:34.326744254Z","tags":null}}